{"version":3,"sources":["components/Header/Header.js","components/Mode/Mode.js","components/Write/Write.js","components/Draw/Draw.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","Mode","onModeChange","className","id","onClick","Write","onChangeType","el","console","log","setState","type","state","this","contentEditable","suppressContentEditableWarning","Draw","App","mode","status","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2TAgBeA,G,6KATP,OACE,6BACM,gD,GALKC,cCcNC,G,MAdH,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAEN,OACE,6BACE,yBAAKC,UAAU,SACX,4BAAQC,GAAG,OAAOC,QAAS,kBAAIH,EAAa,UAAUC,UAAU,gBAAhE,QACA,4BAAQC,GAAG,OAAOC,QAAS,kBAAIH,EAAa,SAASC,UAAU,gBAA/D,YC2CDG,G,wDAhDX,aAAc,IAAD,8BACT,gBAKJC,aAAa,SAACC,GACVC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACC,KAAKJ,KANpB,EAAKK,MAAM,CACPD,KAAK,QAHA,E,qDAUJ,IAAD,OACJ,OACE,6BAEE,yBAAKT,UAAU,cACX,uBAAGA,UAAU,OAAOE,QAAS,kBAAI,EAAKE,aAAa,UAAnD,gBACA,uBAAGJ,UAAU,UAAUE,QAAS,kBAAI,EAAKE,aAAa,aAAtD,kBAGJ,yBAAKJ,UAAU,WAGW,SAAlBW,KAAKD,MAAMD,KAEX,6BACI,wBAAIG,gBAAgB,OAAOC,gCAAgC,GACvD,mCAMR,6BACI,wBAAID,gBAAgB,OAAOC,gCAAgC,GACvD,qC,GAnCRhB,cCULiB,EAVH,WAEJ,OACE,6BACE,kDCmCGC,G,wDAjCX,aAAc,IAAD,8BACT,gBAKJhB,aAAa,SAACiB,GACVV,QAAQC,IAAIS,GACZ,EAAKR,SAAS,CAACS,OAAOD,KANtB,EAAKN,MAAM,CACPO,OAAO,SAHF,E,qDAYT,OACE,yBAAKjB,UAAU,OACT,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOD,aAAcY,KAAKZ,eAED,UAApBY,KAAKD,MAAMO,OAEP,6BACI,kBAAC,EAAD,OAGJ,6BACG,kBAAC,EAAD,Y,GAzBVpB,cCGEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.b62a8ddf.chunk.js","sourcesContent":["import React,{Component} from 'react';\n\n import './Header.css';\n\nclass Header extends Component {\n    \n    render(){\n        return (\n          <div >\n                <h1>Scratch Pad</h1>\n         </div>\n        );\n    }\n\n}\n\nexport default Header;\n","import React from 'react';\n\n import './Mode.css';\n\nconst Mode =({onModeChange})=> {\n\n        return (\n          <div >\n            <div className=\"Modes\">\n                <button id=\"text\" onClick={()=>onModeChange('write')} className=\"text bradius\">Text</button>\n                <button id=\"draw\" onClick={()=>onModeChange('draw')} className=\"draw bradius\">Draw</button>\n            </div>\n\n         </div>\n        );\n\n}\n\nexport default Mode;\n","import React,{Component} from 'react';\n\n import './Write.css';\n\nclass Write extends Component {\n    constructor(){\n        super();\n        this.state={\n            type:'dots',\n        }\n    }\n    onChangeType=(el)=>{\n        console.log(el);\n        this.setState({type:el})\n    }\n    render(){\n        return (\n          <div >\n\n            <div className=\"writeStyle\">\n                <p className=\"dots\" onClick={()=>this.onChangeType('dots')}>Dotted list </p>\n                <p className=\"numbers\" onClick={()=>this.onChangeType('numbers')}>Numbered list</p>\n            </div>\n\n            <div className=\"content\" >\n\n                {\n                    this.state.type==='dots'\n                    ?\n                    <div>\n                        <ul contentEditable=\"true\" suppressContentEditableWarning={true}>\n                            <li > </li>\n\n                        </ul>\n                    </div>\n\n                    :\n                    <div>\n                        <ol contentEditable=\"true\" suppressContentEditableWarning={true}>\n                            <li></li>\n                        </ol>\n                    </div>\n\n                }\n            </div>\n\n         </div>\n        );\n    }\n\n\n}\n\nexport default Write;\n","import React from 'react';\n\n //import './Mode.css';\n\nconst Draw =()=> {\n\n        return (\n          <div >\n            <p>this is from Draw</p>\n         </div>\n        );\n\n}\n\nexport default Draw;\n","import React,{Component} from 'react';\n\nimport Header from './components/Header/Header.js';\nimport Mode from './components/Mode/Mode.js';\nimport Write from './components/Write/Write.js';\nimport Draw from './components/Draw/Draw.js';\n\nimport './App.css';\n\nclass App extends Component {\n    constructor(){\n        super();\n        this.state={\n            status:'write',\n        }\n    }\n    onModeChange=(mode)=>{\n        console.log(mode);\n        this.setState({status:mode});\n\n    }\n    render(){\n        return (\n          <div className=\"App\">\n                <Header />\n                <Mode  onModeChange={this.onModeChange}/>\n                    {\n                     this.state.status===\"write\"\n                     ?\n                         <div>\n                             <Write />\n                         </div>\n                     :\n                         <div>\n                            <Draw />\n                         </div>\n                    }\n         </div>\n        );\n    }\n\n}\n\nexport default App;\n\n//header with the name scratchpad\n//middle part\n   //mode seletion - write draw\n   //sidebar this goes into the respective modes will not be in main page\n   //page\n//footer with TIS mark\n//Header /> // done\n// <mode />\n//     {\n//      status=\"write\"\n//      ?\n//          <div>\n//              <write />\n//          </div>\n//      :\n//          <div>\n//              <draw />\n//          </div>\n//     }\n// <footer />\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}